name: üöÄ Robust Docker Hub Deployment

on:
  push:
    branches: [ main, staging ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and Push Docker Image
      run: |
        echo "üî® Building Docker image for branch: ${{ github.ref_name }}"
        docker build -t vicky3074/clyvanta:${{ github.ref_name }} .
        echo "üì§ Pushing to Docker Hub..."
        docker push vicky3074/clyvanta:${{ github.ref_name }}
        echo "‚úÖ Successfully pushed vicky3074/clyvanta:${{ github.ref_name }}"
        
    - name: Deploy to Production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Starting robust deployment to production..."
        
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts
        
        # Robust deployment with proper container handling
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.DROPLET_IP }} << 'EOF'
          echo "üì¶ Starting Docker Hub deployment..."
          cd clyvanta-new || { echo "‚ùå Project directory not found"; exit 1; }
          
          echo "üìã Current system status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          echo "‚¨áÔ∏è Pulling latest Docker Hub image..."
          docker pull vicky3074/clyvanta:latest || { echo "‚ùå Failed to pull Docker image"; exit 1; }
          
          echo "üõë Gracefully stopping all containers..."
          docker compose down --timeout 30 || echo "‚ö†Ô∏è Some containers may already be stopped"
          
          echo "üßπ Cleaning up old containers and networks..."
          docker container prune -f
          docker network prune -f
          
          echo "üöÄ Starting containers with latest image..."
          docker compose up -d --force-recreate --renew-anon-volumes
          
          echo "‚è≥ Waiting for containers to stabilize..."
          sleep 45
          
          echo "üîç Verifying container health..."
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          
          # Verify web container is responding
          echo "üåê Testing web container health..."
          for i in {1..10}; do
            if docker exec clyvanta-website curl -f -s --max-time 5 http://localhost:3000 > /dev/null; then
              echo "‚úÖ Web container health check passed on attempt $i"
              break
            else
              echo "‚è≥ Web container health check attempt $i/10 failed, retrying..."
              sleep 6
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå Web container health checks failed"
              docker logs clyvanta-website --tail 20
              exit 1
            fi
          done
          
          # Verify nginx is proxying correctly
          echo "üîó Testing nginx proxy..."
          for i in {1..10}; do
            if curl -f -s --max-time 10 http://localhost:80 > /dev/null; then
              echo "‚úÖ Nginx proxy check passed on attempt $i"
              break
            elif curl -f -s --max-time 10 http://localhost:8080 > /dev/null; then
              echo "‚úÖ Nginx backup port check passed on attempt $i"
              break  
            else
              echo "‚è≥ Nginx proxy attempt $i/10 failed, retrying..."
              sleep 6
            fi
            
            if [ $i -eq 10 ]; then
              echo "‚ùå Nginx proxy checks failed"
              docker logs clyvanta-nginx --tail 20
              exit 1
            fi
          done
          
          echo "üèÅ Deployment completed successfully!"
          echo "üìä Final container status:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        EOF
        
        # Cleanup SSH key
        rm -f ~/.ssh/deploy_key
        echo "‚úÖ SSH deployment completed"
        
    - name: Verify Domain and Production
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üåç Verifying domain and production deployment..."
        sleep 30
        
        # Test direct server access
        echo "Testing direct server access..."
        for i in {1..5}; do
          if curl -f -s --max-time 15 http://${{ secrets.DROPLET_IP }}:80 > /dev/null; then
            echo "‚úÖ Direct server port 80 accessible on attempt $i"
            DIRECT_80_OK=true
            break
          elif curl -f -s --max-time 15 http://${{ secrets.DROPLET_IP }}:8080 > /dev/null; then
            echo "‚úÖ Direct server port 8080 accessible on attempt $i"
            DIRECT_8080_OK=true
            break
          else
            echo "‚è≥ Direct server attempt $i/5 failed, retrying..."
            sleep 10
          fi
        done
        
        # Test domain access (through Cloudflare)
        echo "Testing domain access via Cloudflare..."
        for i in {1..5}; do
          RESPONSE=$(curl -s -w "%{http_code}" --max-time 20 https://clyvanta.com -o /dev/null)
          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Domain https://clyvanta.com accessible (HTTP $RESPONSE) on attempt $i"
            DOMAIN_OK=true
            break
          else
            echo "‚è≥ Domain attempt $i/5 returned HTTP $RESPONSE, retrying..."
            sleep 15
          fi
        done
        
        # Final verification and reporting
        if [ "$DIRECT_80_OK" = "true" ] || [ "$DIRECT_8080_OK" = "true" ]; then
          echo "‚úÖ Server is responding on at least one port"
        else
          echo "‚ùå Server is not responding on any port"
          exit 1
        fi
        
        if [ "$DOMAIN_OK" = "true" ]; then
          echo "‚úÖ Domain is accessible via Cloudflare"
        else
          echo "‚ö†Ô∏è Domain may still be propagating or having Cloudflare issues"
          echo "‚ÑπÔ∏è This might be temporary - server is responding directly"
        fi
        
        echo "üéâ Deployment verification completed!"
        echo "üîó Site should be available at: https://clyvanta.com"