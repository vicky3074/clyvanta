name: Simple Direct Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'both'
        type: choice
        options:
        - staging
        - production
        - both

jobs:
  deploy:
    name: Direct SSH Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Direct deployment via SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER_HOST: ${{ secrets.DROPLET_IP }}
      run: |
        echo "üöÄ Direct SSH deployment starting..."
        
        # Setup SSH
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
        
        # Execute deployment directly on server
        ssh root@$SERVER_HOST << 'EOF'
          echo "üîß Starting direct deployment..."
          
          # Navigate to project directory
          cd /var/www/clyvanta || cd /root/clyvanta || {
            echo "‚ùå Could not find project directory"
            exit 1
          }
          
          echo "üìÇ Working in: $(pwd)"
          
          # Pull latest code
          echo "üì• Pulling latest code..."
          git fetch origin
          git reset --hard origin/main
          
          # Restart webhook service first
          echo "üîß Restarting webhook service..."
          pkill -f "deploy-webhook" || true
          docker stop clyvanta-webhook 2>/dev/null || true
          docker rm clyvanta-webhook 2>/dev/null || true
          
          if [ -f "docker-compose.webhook.yml" ]; then
            echo "üê≥ Starting webhook via Docker Compose..."
            docker-compose -f docker-compose.webhook.yml up -d --build
          else
            echo "üì¶ Starting webhook manually..."
            nohup node deploy-webhook.js > /var/log/webhook.log 2>&1 &
          fi
          
          sleep 10
          
          # Deploy applications
          if [[ "${{ github.event.inputs.environment }}" == "staging" || "${{ github.event.inputs.environment }}" == "both" ]]; then
            echo "üöÄ Deploying to staging..."
            docker-compose -f docker-compose.staging.yml down || true
            docker-compose -f docker-compose.staging.yml up -d --build
          fi
          
          if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ github.event.inputs.environment }}" == "both" ]]; then
            echo "üöÄ Deploying to production..."
            docker-compose down || true
            docker-compose up -d --build
          fi
          
          # Test everything
          sleep 30
          echo "üß™ Testing deployments..."
          
          # Test webhook
          if curl -f http://localhost:4040/health 2>/dev/null; then
            echo "‚úÖ Webhook service is working!"
          else
            echo "‚ö†Ô∏è Webhook service may need manual attention"
          fi
          
          # Test environments
          if [[ "${{ github.event.inputs.environment }}" == "staging" || "${{ github.event.inputs.environment }}" == "both" ]]; then
            if curl -f http://localhost:8081 2>/dev/null; then
              echo "‚úÖ Staging is live!"
            else
              echo "‚ùå Staging deployment failed"
            fi
          fi
          
          if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ github.event.inputs.environment }}" == "both" ]]; then
            if curl -f http://localhost:8080 2>/dev/null; then
              echo "‚úÖ Production is live!"
            else
              echo "‚ùå Production deployment failed"
            fi
          fi
          
          echo "üéâ Direct deployment completed!"
        EOF
        
    - name: Verify External Access
      run: |
        echo "üîç Verifying external access..."
        
        if [[ "${{ github.event.inputs.environment }}" == "staging" || "${{ github.event.inputs.environment }}" == "both" ]]; then
          if curl -f http://${{ secrets.DROPLET_IP }}:8081 2>/dev/null; then
            echo "‚úÖ Staging is accessible externally"
          else
            echo "‚ö†Ô∏è Staging may not be accessible externally"
          fi
        fi
        
        if [[ "${{ github.event.inputs.environment }}" == "production" || "${{ github.event.inputs.environment }}" == "both" ]]; then
          if curl -f http://${{ secrets.DROPLET_IP }}:8080 2>/dev/null; then
            echo "‚úÖ Production is accessible externally"
          else
            echo "‚ö†Ô∏è Production may not be accessible externally"
          fi
        fi
        
        if curl -f http://${{ secrets.DROPLET_IP }}:4040/health 2>/dev/null; then
          echo "‚úÖ Webhook service is accessible externally"
        else
          echo "‚ö†Ô∏è Webhook service may not be accessible externally"
        fi