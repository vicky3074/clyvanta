name: 🔒 Safe CI/CD Pipeline with Automated Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  # Stage 1: Code Quality & Security
  quality-checks:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run check-types

      - name: ESLint code quality
        run: npm run lint

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: Production build test
        run: npm run build

  # Stage 2: Automated Testing
  automated-testing:
    name: 🧪 Comprehensive Automated Testing
    runs-on: ubuntu-latest
    needs: quality-checks
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: clyvanta_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          DATABASE_URL=postgresql://postgres:testpassword@localhost:5432/clyvanta_test
          NEXTAUTH_SECRET=testsecret
          NEXTAUTH_URL=http://localhost:3000
          NODE_ENV=test
          EOF

      - name: Build application for testing
        run: npm run build

      - name: Start application in background
        run: |
          npm start &
          sleep 10
          curl --retry 10 --retry-delay 3 --retry-connrefused http://localhost:3000

      - name: Run mobile responsiveness tests
        run: npm run test:mobile
        env:
          CI: true

      - name: Run functional tests
        run: npm run test:functional
        env:
          CI: true

      - name: Run full E2E test suite
        run: npm run test:e2e
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-screenshots
          path: test-results/
          retention-days: 7

  # Stage 3: Docker Build & Security Scan
  docker-build:
    name: 🐳 Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: automated-testing
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            vicky3074/clyvanta:${{ github.sha }}
            vicky3074/clyvanta:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Docker security scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: vicky3074/clyvanta:${{ github.sha }}
          sarif-file: sarif.output.json
          summary: true

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: sarif.output.json

  # Stage 4: Staging Deployment (Automatic)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Image: vicky3074/clyvanta:${{ github.sha }}"
          # Add staging deployment logic here
          echo "✅ Staging deployment complete"

  # Stage 5: Production Deployment (Manual Approval Required)
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, deploy-staging]
    if: github.event.inputs.environment == 'production' || (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch')
    environment: 
      name: production
      url: https://clyvanta.com
    steps:
      - name: Pre-deployment health check
        run: |
          echo "🔍 Running pre-deployment health checks..."
          curl -f https://clyvanta.com || exit 1
          echo "✅ Current production is healthy"

      - name: Deploy to production with rollback capability
        run: |
          echo "🚀 Starting production deployment..."
          echo "Image: vicky3074/clyvanta:${{ github.sha }}"
          
          # SSH into production server
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ubuntu@${{ secrets.DROPLET_IP }} << 'EOF'
            set -e
            cd clyvanta-new
            
            # Backup current deployment
            echo "📦 Creating deployment backup..."
            docker tag clyvanta-clyvanta-web:latest clyvanta-clyvanta-web:backup-$(date +%Y%m%d-%H%M%S)
            
            # Pull new image
            echo "⬇️ Pulling new image..."
            docker pull vicky3074/clyvanta:${{ github.sha }}
            
            # Update docker-compose to use new image
            sed -i 's|clyvanta-clyvanta-web:latest|vicky3074/clyvanta:${{ github.sha }}|g' docker-compose.yml
            
            # Deploy with health checks
            echo "🔄 Deploying new version..."
            docker compose up -d
            
            # Wait for containers to start
            sleep 30
            
            # Health check
            echo "🏥 Running health checks..."
            for i in {1..10}; do
              if curl -f http://localhost:8080 > /dev/null 2>&1; then
                echo "✅ Health check passed"
                break
              fi
              echo "⏳ Waiting for application to start (attempt $i/10)..."
              sleep 10
            done
            
            # Verify external access
            if ! curl -f http://localhost:8080 > /dev/null 2>&1; then
              echo "❌ Health check failed - rolling back"
              git checkout HEAD~1 docker-compose.yml
              docker compose up -d
              exit 1
            fi
            
            echo "🎉 Production deployment successful!"
          EOF

      - name: Post-deployment verification
        run: |
          echo "🔍 Running post-deployment verification..."
          sleep 15
          
          # Test main site
          curl -f https://clyvanta.com || exit 1
          
          # Test mobile responsiveness (basic check)
          curl -f -H "User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)" https://clyvanta.com || exit 1
          
          echo "✅ Post-deployment verification passed"

      - name: Cleanup SSH key
        if: always()
        run: rm -f /tmp/ssh_key

      - name: Notify deployment success
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "🔗 Site: https://clyvanta.com"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"

  # Cleanup old Docker images
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Cleanup old Docker images
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Delete old images (keep last 5)
        run: |
          echo "🧹 Cleaning up old Docker images..."
          # Keep last 5 images, delete older ones
          # This would need Docker Hub API integration
          echo "✅ Cleanup completed"