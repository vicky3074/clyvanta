name: üöÄ Optimized Safe CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  # Stage 1: Code Quality & Security
  quality-checks:
    name: üîç Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run check-types

      - name: ESLint code quality
        run: npm run lint

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: Production build test
        run: npm run build

  # Stage 2: Docker Build & Security Scan (Build Once, Use Everywhere)
  docker-build:
    name: üê≥ Docker Build & Security Scan
    runs-on: ubuntu-latest
    needs: quality-checks
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: vicky3074/clyvanta
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Run Docker security scan
        uses: docker/scout-action@v1
        with:
          command: cves
          image: vicky3074/clyvanta:main-${{ github.sha }}
          sarif-file: sarif.output.json
          summary: true

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: sarif.output.json

  # Stage 3: Automated Testing (Using Pre-built Image)
  automated-testing:
    name: üß™ Test Pre-built Docker Image
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create test docker-compose file
        run: |
          cat > docker-compose.test.yml << 'EOF'
          services:
            clyvanta-postgres:
              image: postgres:15-alpine
              environment:
                POSTGRES_PASSWORD: testpassword
                POSTGRES_DB: clyvanta_test
              ports:
                - "5432:5432"
              healthcheck:
                test: ["CMD-SHELL", "pg_isready -U postgres"]
                interval: 10s
                timeout: 5s
                retries: 5

            clyvanta-web:
              image: vicky3074/clyvanta:main-${{ github.sha }}
              ports:
                - "8080:8080"
              environment:
                DATABASE_URL: postgresql://postgres:testpassword@clyvanta-postgres:5432/clyvanta_test
                NODE_ENV: production
              depends_on:
                clyvanta-postgres:
                  condition: service_healthy
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080"]
                interval: 30s
                timeout: 10s
                retries: 3
          EOF

      - name: Start services with pre-built image
        run: |
          docker compose -f docker-compose.test.yml up -d
          sleep 30
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8080

      - name: Run mobile responsiveness tests
        run: npx playwright test tests/mobile-responsiveness.spec.ts
        env:
          CI: true

      - name: Run functional tests
        run: npx playwright test tests/functional.spec.ts
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-screenshots
          path: test-results/
          retention-days: 7

      - name: Cleanup test environment
        if: always()
        run: docker compose -f docker-compose.test.yml down

  # Stage 4: Staging Deployment (Automatic)
  deploy-staging:
    name: üöß Deploy to Staging
    runs-on: ubuntu-latest
    needs: automated-testing
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Deploy to staging environment
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "Image: vicky3074/clyvanta:main-${{ github.sha }}"
          echo "‚úÖ Staging deployment complete"

  # Stage 5: Production Deployment (Manual Approval Required)
  deploy-production:
    name: üéØ Deploy to Production
    runs-on: ubuntu-latest
    needs: [automated-testing, deploy-staging]
    if: github.event.inputs.environment == 'production' || (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch')
    environment: 
      name: production
      url: https://clyvanta.com
    steps:
      - name: Pre-deployment health check
        run: |
          echo "üîç Running pre-deployment health checks..."
          curl -f https://clyvanta.com || exit 1
          echo "‚úÖ Current production is healthy"

      - name: Deploy to production with rollback capability
        run: |
          echo "üöÄ Starting production deployment..."
          echo "Image: vicky3074/clyvanta:main-${{ github.sha }}"
          
          # SSH into production server
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ubuntu@${{ secrets.DROPLET_IP }} << 'EOF'
            set -e
            cd clyvanta-new
            
            # Backup current deployment
            echo "üì¶ Creating deployment backup..."
            docker tag clyvanta-clyvanta-web:latest clyvanta-clyvanta-web:backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
            
            # Pull new pre-built and tested image
            echo "‚¨áÔ∏è Pulling tested image..."
            docker pull vicky3074/clyvanta:main-${{ github.sha }}
            
            # Update docker-compose to use new image
            cat > docker-compose.prod.yml << 'COMPOSE_EOF'
          services:
            clyvanta-postgres:
              image: postgres:15-alpine
              environment:
                POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-clyvanta2025}
                POSTGRES_DB: clyvanta
              volumes:
                - postgres_data:/var/lib/postgresql/data
              ports:
                - "5432:5432"

            clyvanta-web:
              image: vicky3074/clyvanta:main-${{ github.sha }}
              ports:
                - "8080:8080"
              environment:
                DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-clyvanta2025}@clyvanta-postgres:5432/clyvanta
                NODE_ENV: production
              depends_on:
                - clyvanta-postgres

            clyvanta-nginx:
              image: nginx:alpine
              ports:
                - "80:80"
              volumes:
                - ./nginx.conf:/etc/nginx/nginx.conf:ro
              depends_on:
                - clyvanta-web

          volumes:
            postgres_data:
          COMPOSE_EOF
            
            # Deploy with health checks
            echo "üîÑ Deploying new version..."
            docker compose -f docker-compose.prod.yml up -d
            
            # Wait for containers to start
            sleep 30
            
            # Health check
            echo "üè• Running health checks..."
            for i in {1..10}; do
              if curl -f http://localhost:8080 > /dev/null 2>&1; then
                echo "‚úÖ Health check passed"
                break
              fi
              echo "‚è≥ Waiting for application to start (attempt $i/10)..."
              sleep 10
            done
            
            # Verify external access
            if ! curl -f http://localhost:8080 > /dev/null 2>&1; then
              echo "‚ùå Health check failed - rolling back"
              docker compose -f docker-compose.prod.yml down
              docker tag clyvanta-clyvanta-web:backup-$(date +%Y%m%d) clyvanta-clyvanta-web:latest 2>/dev/null || true
              docker compose up -d
              exit 1
            fi
            
            echo "üéâ Production deployment successful!"
          EOF

      - name: Post-deployment verification
        run: |
          echo "üîç Running post-deployment verification..."
          sleep 15
          
          # Test main site
          curl -f https://clyvanta.com || exit 1
          
          # Test mobile responsiveness (basic check)
          curl -f -H "User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)" https://clyvanta.com || exit 1
          
          echo "‚úÖ Post-deployment verification passed"

      - name: Cleanup SSH key
        if: always()
        run: rm -f /tmp/ssh_key

      - name: Notify deployment success
        run: |
          echo "üéâ Production deployment completed successfully!"
          echo "üîó Site: https://clyvanta.com"
          echo "üìä Commit: ${{ github.sha }}"
          echo "üë§ Deployed by: ${{ github.actor }}"
          echo "üê≥ Image: vicky3074/clyvanta:main-${{ github.sha }}"