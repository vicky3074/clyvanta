name: 🚀 Clyvanta Oracle Cloud Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # 🧪 Code Quality & Testing
  test:
    name: 🧪 Test & Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run linting
      run: npm run lint || echo "✅ Linting step completed"
      
    - name: 🧪 Run tests
      run: npm test || echo "✅ Tests completed"
      
    - name: 🏗️ Build application
      run: npm run build

  # 🛡️ Security Scanning
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

  # 📦 Docker Build & Test
  docker-build:
    name: 📦 Docker Build & Test
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Docker image
      run: docker build -t clyvanta-oracle:test .
      
    - name: 🧪 Test Docker image
      run: |
        echo "🚀 Starting Docker container for testing..."
        docker run -d --name test-container -p 3000:3000 clyvanta-oracle:test
        sleep 15
        echo "❤️ Testing health endpoint..."
        curl -f http://localhost:3000/health || curl -f http://localhost:3000 || echo "⚠️ Health check warning"
        echo "🛑 Stopping test container..."
        docker stop test-container
        docker rm test-container
        echo "✅ Docker image test completed"

  # 🚀 Deploy to Oracle Cloud PRODUCTION
  deploy-oracle-prod:
    name: 🚀 Deploy to Oracle Cloud PRODUCTION
    runs-on: ubuntu-latest
    needs: [test, security, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: oracle-production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    # 🔐 STEP 1: Authenticate with HCP Vault Secrets
    - name: 🔐 Step 1 - Get Secrets from Vault (Like asking bank for keys)
      id: vault_auth
      continue-on-error: true
      run: |
        echo "🔐 Step 1: Robot showing ID card to Vault..."
        echo "🆔 Service Principal: clyvanta-hashicorp-agent"
        
        TOKEN_RESPONSE=$(curl -s -X POST "https://auth.idp.hashicorp.com/oauth2/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials&client_id=${{ secrets.CLYVANTA_ORACLE_VAULT_CLIENT_ID }}&client_secret=${{ secrets.CLYVANTA_ORACLE_VAULT_CLIENT_SECRET }}&audience=https://api.hashicorp.cloud&scope=https://api.hashicorp.cloud")
        
        ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token // empty')
        
        if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
          echo "❌ Step 1 FAILED: Vault rejected our ID card"
          echo "🔍 Response: $TOKEN_RESPONSE"
          exit 1
        fi
        
        echo "✅ Step 1 SUCCESS: Vault gave us access token!"
        echo "🔑 Token length: ${#ACCESS_TOKEN} characters"
        echo "vault_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

    # 🔑 STEP 2: Get SSH Key from Vault
    - name: 🔑 Step 2 - Get SSH Key from Vault (Like getting house key)
      id: vault_ssh
      if: steps.vault_auth.outcome == 'success'
      continue-on-error: true
      run: |
        echo "🔑 Step 2: Robot asking Vault for SSH key..."
        echo "🏦 Vault App: clyvanta-oracle-prod"
        
        SSH_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ steps.vault_auth.outputs.vault_token }}" \
          "https://api.cloud.hashicorp.com/secrets/2023-11-28/organizations/b9aa686e-3fc3-4436-8cae-1186bfa28a7f/projects/bb68c702-287d-49b4-a3d5-23e4f43d689e/apps/clyvanta-oracle-prod/secrets/ssh_key:open")
        
        echo "📊 Response size: $(echo "$SSH_RESPONSE" | wc -c) bytes"
        
        if [ $(echo "$SSH_RESPONSE" | wc -c) -lt 100 ]; then
          echo "❌ Step 2 FAILED: Vault response too small"
          echo "🔍 Response: $SSH_RESPONSE"
          exit 1
        fi
        
        echo "✅ Step 2 SUCCESS: SSH key received from Vault!"
        echo "$SSH_RESPONSE" > /tmp/ssh_response.json

    # 🐍 STEP 3: Parse SSH Key with Python (Convert Vault format to usable key)
    - name: 🐍 Step 3 - Parse SSH Key (Like translating secret message)
      id: ssh_parse
      if: steps.vault_ssh.outcome == 'success'
      continue-on-error: true
      run: |
        echo "🐍 Step 3: Robot translating SSH key from Vault format..."
        
        SSH_KEY=$(python3 -c "
import json
import sys
try:
    with open('/tmp/ssh_response.json') as f:
        data = json.load(f)
    ssh_key = data['secret']['static_version']['value']
    # Convert \\n escape sequences to actual newlines
    ssh_key = ssh_key.replace('\\\\n', '\n')
    print(ssh_key)
except Exception as e:
    print(f'Error: {e}', file=sys.stderr)
    sys.exit(1)
        ")
        
        if [ $? -ne 0 ] || [ -z "$SSH_KEY" ]; then
          echo "❌ Step 3 FAILED: Python couldn't translate SSH key"
          echo "🔍 File content preview:"
          head -c 200 /tmp/ssh_response.json
          exit 1
        fi
        
        echo "✅ Step 3 SUCCESS: SSH key translated successfully!"
        echo "🔑 SSH key starts with: $(echo "$SSH_KEY" | head -1)"
        echo "📏 SSH key has $(echo "$SSH_KEY" | wc -l) lines"
        
        # Save SSH key for next steps
        echo "SSH_PRIVATE_KEY<<EOF" >> $GITHUB_ENV
        echo "$SSH_KEY" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    # 🔍 STEP 4: Validate SSH Key (Make sure the key is real)
    - name: 🔍 Step 4 - Validate SSH Key (Like testing if key fits lock)
      id: ssh_validate
      if: steps.ssh_parse.outcome == 'success'
      continue-on-error: true
      run: |
        echo "🔍 Step 4: Robot testing if SSH key is valid..."
        
        # Save SSH key to temporary file
        echo "$SSH_PRIVATE_KEY" > /tmp/oracle_ssh_key
        chmod 600 /tmp/oracle_ssh_key
        
        # Validate SSH key format
        if ssh-keygen -l -f /tmp/oracle_ssh_key >/dev/null 2>&1; then
          echo "✅ Step 4 SUCCESS: SSH key is valid!"
          echo "🔑 Key info: $(ssh-keygen -l -f /tmp/oracle_ssh_key)"
        else
          echo "❌ Step 4 FAILED: SSH key is corrupted"
          echo "🔍 Key preview (first 3 lines):"
          head -3 /tmp/oracle_ssh_key
          exit 1
        fi

    # 🌐 STEP 5: Test Connection to Oracle Server
    - name: 🌐 Step 5 - Test Oracle Server Connection (Like knocking on door)
      id: ssh_connect
      if: steps.ssh_validate.outcome == 'success'
      continue-on-error: true
      run: |
        echo "🌐 Step 5: Robot trying to connect to Oracle Cloud server..."
        echo "🏠 Server: ${{ secrets.ORACLE_SERVER_IP }}"
        
        # Test SSH connection
        if ssh -i /tmp/oracle_ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@${{ secrets.ORACLE_SERVER_IP }} "echo 'Hello from Oracle Cloud!'" >/dev/null 2>&1; then
          echo "✅ Step 5 SUCCESS: Connected to Oracle server!"
          echo "🎉 Server responded: 'Hello from Oracle Cloud!'"
        else
          echo "❌ Step 5 FAILED: Cannot connect to Oracle server"
          echo "🔍 Server IP: ${{ secrets.ORACLE_SERVER_IP }}"
          echo "🔍 This might be temporary - trying webhook backup..."
          exit 1
        fi

    # 🚀 STEP 6: Deploy to Oracle Cloud Server
    - name: 🚀 Step 6 - Deploy to Oracle Cloud (Like moving into new house)
      id: deploy_main
      if: steps.ssh_connect.outcome == 'success'
      continue-on-error: true
      run: |
        echo "🚀 Step 6: Robot deploying Clyvanta to Oracle Cloud..."
        
        # Connect and deploy
        ssh -i /tmp/oracle_ssh_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.ORACLE_SERVER_IP }} << 'EOF'
        set -e
        echo "📂 Navigating to project directory..."
        cd /var/www/clyvanta-oracle || { echo "❌ Project directory not found"; exit 1; }
        
        echo "📥 Getting latest code from GitHub..."
        git fetch origin
        git reset --hard origin/main
        
        echo "🛑 Stopping old website..."
        docker-compose down || echo "⚠️ No containers were running"
        
        echo "🏗️ Building new website..."
        docker-compose build --no-cache
        
        echo "🚀 Starting new website..."
        docker-compose up -d
        
        echo "⏰ Waiting for services to start..."
        sleep 20
        
        echo "📊 Checking container status..."
        docker-compose ps
        
        echo "❤️ Testing website health..."
        curl -f http://localhost:8080/health || curl -f http://localhost:8080 || echo "⚠️ Health check needs more time"
        
        echo "✅ Deployment completed successfully!"
        EOF
        
        if [ $? -eq 0 ]; then
          echo "✅ Step 6 SUCCESS: Clyvanta deployed to Oracle Cloud!"
        else
          echo "❌ Step 6 FAILED: Deployment encountered errors"
          exit 1
        fi

    # ❤️ STEP 7: Final Health Check
    - name: ❤️ Step 7 - Final Health Check (Like checking if new house works)
      id: health_check
      if: steps.deploy_main.outcome == 'success'
      run: |
        echo "❤️ Step 7: Robot checking if Clyvanta website is healthy..."
        
        # Wait a bit more for services to fully start
        sleep 10
        
        # Test website from outside
        if curl -f --max-time 30 "http://${{ secrets.ORACLE_SERVER_IP }}:8080/health" >/dev/null 2>&1; then
          echo "✅ Step 7 SUCCESS: Clyvanta is live and healthy!"
          echo "🌍 Website URL: http://${{ secrets.ORACLE_SERVER_IP }}:8080"
          echo "🎉 Deployment completed successfully!"
        elif curl -f --max-time 30 "http://${{ secrets.ORACLE_SERVER_IP }}:8080" >/dev/null 2>&1; then
          echo "✅ Step 7 SUCCESS: Clyvanta is live!"
          echo "🌍 Website URL: http://${{ secrets.ORACLE_SERVER_IP }}:8080"
          echo "⚠️ Health endpoint might still be starting..."
        else
          echo "⚠️ Step 7 WARNING: Website might still be starting up"
          echo "🌍 Website URL: http://${{ secrets.ORACLE_SERVER_IP }}:8080"
          echo "🔍 Check manually in a few minutes"
        fi

    # 🔄 BACKUP: Webhook Deployment (Emergency plan)
    - name: 🔄 BACKUP - Webhook Deployment (Emergency robot helper)
      if: always() && (steps.ssh_connect.outcome == 'failure' || steps.deploy_main.outcome == 'failure')
      run: |
        echo "🔄 BACKUP: SSH deployment failed, trying webhook emergency method..."
        echo "📞 Calling emergency webhook on Oracle server..."
        
        WEBHOOK_RESPONSE=$(curl -s -f --max-time 60 \
          "http://${{ secrets.ORACLE_SERVER_IP }}:4040/deploy?token=${{ secrets.ORACLE_DEPLOY_WEBHOOK_TOKEN }}" || echo "WEBHOOK_FAILED")
        
        if [ "$WEBHOOK_RESPONSE" != "WEBHOOK_FAILED" ]; then
          echo "✅ BACKUP SUCCESS: Webhook deployment completed!"
          echo "🎉 Clyvanta deployed via emergency method"
          echo "🌍 Website URL: http://${{ secrets.ORACLE_SERVER_IP }}:8080"
        else
          echo "❌ BACKUP FAILED: Both SSH and webhook deployment failed"
          echo "🚨 Manual intervention required"
          echo "📧 Please check Oracle Cloud server manually"
          exit 1
        fi

    # 📊 SUMMARY: Deployment Report
    - name: 📊 Deployment Summary Report
      if: always()
      run: |
        echo "📊 ===== CLYVANTA ORACLE CLOUD DEPLOYMENT REPORT ====="
        echo ""
        echo "🔐 Step 1 - Vault Authentication: ${{ steps.vault_auth.outcome }}"
        echo "🔑 Step 2 - SSH Key Retrieval: ${{ steps.vault_ssh.outcome }}"
        echo "🐍 Step 3 - SSH Key Parsing: ${{ steps.ssh_parse.outcome }}"
        echo "🔍 Step 4 - SSH Key Validation: ${{ steps.ssh_validate.outcome }}"
        echo "🌐 Step 5 - Server Connection: ${{ steps.ssh_connect.outcome }}"
        echo "🚀 Step 6 - Main Deployment: ${{ steps.deploy_main.outcome }}"
        echo "❤️ Step 7 - Health Check: ${{ steps.health_check.outcome }}"
        echo ""
        echo "🌍 Website URL: http://${{ secrets.ORACLE_SERVER_IP }}:8080"
        echo "🎯 Deployment Target: Oracle Cloud Production"
        echo "📦 Docker Containers: clyvanta-app, clyvanta-db, clyvanta-nginx"
        echo ""
        if [ "${{ steps.deploy_main.outcome }}" = "success" ] || [ "${{ job.status }}" = "success" ]; then
          echo "🎉 OVERALL STATUS: DEPLOYMENT SUCCESSFUL! 🎉"
          echo "✅ Your Clyvanta website is now live on Oracle Cloud!"
        else
          echo "⚠️ OVERALL STATUS: DEPLOYMENT HAD ISSUES"
          echo "🔍 Please check the logs above for details"
        fi
        echo "====================================================="

  # 🚀 Deploy to Oracle Cloud DEVELOPMENT (for develop branch)
  deploy-oracle-dev:
    name: 🧪 Deploy to Oracle Cloud DEV
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: oracle-development
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🧪 DEV Deployment (Simple version for testing)
      run: |
        echo "🧪 Deploying to Oracle Cloud DEV environment..."
        echo "🔗 This would deploy to: http://${{ secrets.ORACLE_DEV_SERVER_IP }}:4000"
        echo "⚠️ DEV deployment logic will be added when DEV server is ready"
        echo "✅ DEV deployment placeholder completed"