name: Production Deployment Pipeline

on:
  push:
    branches: [ main ]

env:
  NODE_VERSION: '20'

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build

  production-deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Deploy via SSH
      run: |
        echo "Starting deployment..."
        
        # Setup SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts
        
        # Deploy to server
        ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.DROPLET_IP }} << 'EOF'
          echo "Deploying to server..."
          
          # Remove old deployment
          rm -rf clyvanta-new || true
          
          # Pull fresh code
          git clone https://github.com/vicky3074/clyvanta.git clyvanta-new
          cd clyvanta-new
          
          # Generate SSL certificates
          mkdir -p ssl
          openssl genrsa -out ssl/key.pem 2048
          openssl req -new -x509 -key ssl/key.pem -out ssl/cert.pem -days 365 -subj "/C=CA/ST=Ontario/L=Toronto/O=Clyvanta/CN=clyvanta.com"
          
          # Stop existing containers
          docker stop clyvanta-nginx clyvanta-website clyvanta-postgres || true
          docker rm clyvanta-nginx clyvanta-website clyvanta-postgres || true
          
          # Start new containers
          docker compose up -d --build
          
          echo "Deployment completed!"
        EOF
        
        # Cleanup
        rm -f ~/.ssh/deploy_key

    - name: Verify Deployment
      run: |
        echo "Verifying deployment..."
        sleep 30
        
        if curl -f -s http://${{ secrets.DROPLET_IP }}:8080 > /dev/null; then
          echo "Deployment successful!"
        else
          echo "Deployment verification failed"
          exit 1
        fi