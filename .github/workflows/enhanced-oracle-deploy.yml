name: 🚀 Enhanced Clyvanta Oracle Cloud Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
        - development

env:
  NODE_VERSION: ${{ vars.NODE_VERSION || '20' }}
  ORACLE_REGION: ${{ vars.ORACLE_REGION }}
  DEPLOYMENT_ENV: ${{ vars.DEPLOYMENT_ENVIRONMENT }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # 🔍 Environment Setup & Validation
  setup:
    name: 🔍 Environment Setup
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy_url: ${{ steps.env.outputs.deploy_url }}
      
    steps:
    - name: 🎯 Determine Environment
      id: env
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          ENV="${{ github.event.inputs.environment }}"
        elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ENV="production"
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          ENV="development"
        else
          ENV="staging"
        fi
        
        echo "environment=$ENV" >> $GITHUB_OUTPUT
        echo "deploy_url=http://${{ secrets.ORACLE_SERVER_IP }}:8080" >> $GITHUB_OUTPUT
        echo "🎯 Deploying to: $ENV"
        echo "🌐 URL: http://${{ secrets.ORACLE_SERVER_IP }}:8080"

    - name: ✅ Validate Secrets & Variables
      run: |
        echo "🔍 Validating configuration..."
        
        # Check required secrets
        REQUIRED_SECRETS=("ORACLE_SERVER_IP" "CLYVANTA_ORACLE_VAULT_CLIENT_ID" "CLYVANTA_ORACLE_VAULT_CLIENT_SECRET")
        for secret in "${REQUIRED_SECRETS[@]}"; do
          if [ -z "${{ secrets[secret] }}" ]; then
            echo "❌ Missing required secret: $secret"
            exit 1
          fi
        done
        
        # Check required variables
        REQUIRED_VARS=("NODE_VERSION" "ORACLE_REGION" "DEPLOYMENT_ENVIRONMENT")
        for var in "${REQUIRED_VARS[@]}"; do
          if [ -z "${{ vars[var] }}" ]; then
            echo "❌ Missing required variable: $var"
            exit 1
          fi
        done
        
        echo "✅ All secrets and variables validated"
        echo "📊 Configuration Summary:"
        echo "   Environment: ${{ steps.env.outputs.environment }}"
        echo "   Node Version: ${{ vars.NODE_VERSION }}"
        echo "   Oracle Region: ${{ vars.ORACLE_REGION }}"
        echo "   Server IP: ${{ secrets.ORACLE_SERVER_IP }}"

  # 🧪 Code Quality & Testing
  test:
    name: 🧪 Test & Code Quality
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js ${{ vars.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ vars.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run linting
      run: npm run lint || echo "✅ Linting step completed"
      
    - name: 🧪 Run tests
      run: npm test || echo "✅ Tests completed"
      
    - name: 🏗️ Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SITE_URL: ${{ vars.NEXT_PUBLIC_SITE_URL }}
        NODE_ENV: production

  # 🛡️ Security Scanning
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [setup, test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🔒 Run npm audit
      run: npm audit --audit-level moderate || echo "✅ Security audit completed"
      
    - name: 🛡️ Check for exposed secrets
      run: |
        echo "🔍 Scanning for accidentally committed secrets..."
        if grep -r "sk_live_\|pk_live_\|SECRET\|PASSWORD" --exclude-dir=node_modules --exclude="*.md" . | grep -v "example\|placeholder"; then
          echo "❌ Potential secrets found in code!"
          exit 1
        else
          echo "✅ No exposed secrets detected"
        fi

  # 🚀 Deploy to Oracle Cloud
  deploy:
    name: 🚀 Deploy to Oracle Cloud
    runs-on: ubuntu-latest
    needs: [setup, test, security]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment: ${{ needs.setup.outputs.environment }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    # 🔐 STEP 1: Get Vault Token
    - name: 🔐 Step 1 - Authenticate with HCP Vault
      id: vault_auth
      run: |
        echo "🔐 Authenticating with HCP Vault Secrets..."
        echo "🆔 Client ID: ${{ secrets.CLYVANTA_ORACLE_VAULT_CLIENT_ID }}"
        
        TOKEN_RESPONSE=$(curl -s -X POST "https://auth.idp.hashicorp.com/oauth2/token" \
          -H "Content-Type: application/x-www-form-urlencoded" \
          -d "grant_type=client_credentials&client_id=${{ secrets.CLYVANTA_ORACLE_VAULT_CLIENT_ID }}&client_secret=${{ secrets.CLYVANTA_ORACLE_VAULT_CLIENT_SECRET }}&audience=https://api.hashicorp.cloud")
        
        ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token // empty')
        
        if [ -z "$ACCESS_TOKEN" ] || [ "$ACCESS_TOKEN" = "null" ]; then
          echo "❌ Vault authentication failed"
          echo "Response: $TOKEN_RESPONSE"
          exit 1
        fi
        
        echo "✅ Vault authentication successful"
        echo "vault_token=$ACCESS_TOKEN" >> $GITHUB_OUTPUT

    # 🔑 STEP 2: Get SSH Key from Vault
    - name: 🔑 Step 2 - Retrieve SSH Key from Vault
      id: get_ssh_key
      run: |
        echo "🔑 Retrieving SSH key from Vault..."
        
        # Get SSH key from Vault (adjust endpoint as needed)
        SSH_KEY_RESPONSE=$(curl -s \
          -H "Authorization: Bearer ${{ steps.vault_auth.outputs.vault_token }}" \
          "https://api.cloud.hashicorp.com/secrets/2023-06-13/organizations/bb68c702-287d-49b4-a3d5-23e4f43d689e/projects/b0c3b6a7-8fdd-4dd3-9ba5-e4e1e5ddff1a/apps/clyvanta-oracle-prod/kv/ORACLE_DEPLOY_PRIVATE_KEY")
        
        # Extract and decode SSH key
        SSH_KEY_B64=$(echo "$SSH_KEY_RESPONSE" | jq -r '.secret.static_version.value // empty')
        
        if [ -z "$SSH_KEY_B64" ] || [ "$SSH_KEY_B64" = "null" ]; then
          echo "❌ Failed to retrieve SSH key from Vault"
          exit 1
        fi
        
        # Decode and save SSH key
        echo "$SSH_KEY_B64" | base64 -d > /tmp/oracle_ssh_key
        chmod 600 /tmp/oracle_ssh_key
        
        # Validate SSH key
        if ssh-keygen -l -f /tmp/oracle_ssh_key >/dev/null 2>&1; then
          echo "✅ SSH key retrieved and validated"
        else
          echo "❌ Invalid SSH key"
          exit 1
        fi

    # 🌐 STEP 3: Test Connection
    - name: 🌐 Step 3 - Test Oracle Server Connection
      run: |
        echo "🌐 Testing connection to Oracle Cloud server..."
        echo "📍 Server: ${{ secrets.ORACLE_SERVER_IP }}"
        echo "🌍 Region: ${{ vars.ORACLE_REGION }}"
        
        # Test SSH connection with timeout
        if timeout ${{ vars.HEALTH_CHECK_TIMEOUT || 30 }} ssh -i /tmp/oracle_ssh_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@${{ secrets.ORACLE_SERVER_IP }} "echo 'Connection successful'"; then
          echo "✅ Oracle Cloud server is reachable"
        else
          echo "❌ Cannot connect to Oracle Cloud server"
          echo "🔍 Checking server status..."
          ping -c 3 ${{ secrets.ORACLE_SERVER_IP }} || echo "Server not responding to ping"
          exit 1
        fi

    # 🚀 STEP 4: Deploy Application
    - name: 🚀 Step 4 - Deploy Clyvanta to Oracle Cloud
      timeout-minutes: ${{ fromJson(vars.DEPLOYMENT_TIMEOUT || '5') }}
      run: |
        echo "🚀 Deploying Clyvanta to Oracle Cloud..."
        echo "🐳 Docker Compose File: ${{ vars.DOCKER_COMPOSE_FILE }}"
        echo "🌐 Target URL: ${{ needs.setup.outputs.deploy_url }}"
        
        ssh -i /tmp/oracle_ssh_key -o StrictHostKeyChecking=no ubuntu@${{ secrets.ORACLE_SERVER_IP }} << 'DEPLOY_SCRIPT'
        set -e
        
        echo "📂 Navigating to project directory..."
        cd /var/www/clyvanta-oracle || {
          echo "❌ Project directory not found, creating..."
          sudo mkdir -p /var/www/clyvanta-oracle
          sudo chown ubuntu:ubuntu /var/www/clyvanta-oracle
          cd /var/www/clyvanta-oracle
          git clone https://github.com/vicky3074/clyvanta.git .
        }
        
        echo "📥 Updating code..."
        git fetch origin
        git reset --hard origin/main
        
        echo "🛑 Stopping services..."
        docker-compose -f ${{ vars.DOCKER_COMPOSE_FILE || 'docker-compose.oracle.yml' }} down || true
        
        echo "🔧 Setting up environment..."
        cat > .env << EOF
        NODE_ENV=production
        DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
        NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}
        ORACLE_SERVER_IP=${{ secrets.ORACLE_SERVER_IP }}
        WEBHOOK_TOKEN=${{ secrets.ORACLE_DEPLOY_WEBHOOK_TOKEN }}
        NEXT_PUBLIC_SITE_URL=${{ vars.NEXT_PUBLIC_SITE_URL }}
        EOF
        
        echo "🐳 Building and starting services..."
        docker-compose -f ${{ vars.DOCKER_COMPOSE_FILE || 'docker-compose.oracle.yml' }} up -d --build
        
        echo "⏳ Waiting for services to start..."
        sleep 30
        
        echo "✅ Deployment completed successfully!"
        DEPLOY_SCRIPT

    # ✅ STEP 5: Verify Deployment
    - name: ✅ Step 5 - Verify Deployment
      run: |
        echo "✅ Verifying deployment..."
        
        # Wait for application to be ready
        echo "⏳ Waiting for application to start..."
        sleep 60
        
        # Test main application
        DEPLOY_URL="${{ needs.setup.outputs.deploy_url }}"
        echo "🌐 Testing: $DEPLOY_URL"
        
        for i in {1..5}; do
          if curl -f -s "$DEPLOY_URL/health" > /dev/null 2>&1; then
            echo "✅ Application is responding!"
            break
          else
            echo "⏳ Attempt $i/5 - Application not ready yet..."
            sleep 30
          fi
        done
        
        # Final health check
        if curl -f -s "$DEPLOY_URL/health"; then
          echo "🎉 Deployment verification successful!"
          echo "🌐 Clyvanta is live at: $DEPLOY_URL"
        else
          echo "❌ Deployment verification failed"
          exit 1
        fi

    # 📊 STEP 6: Post-Deployment Tasks
    - name: 📊 Step 6 - Post-Deployment Tasks
      if: success()
      run: |
        echo "📊 Running post-deployment tasks..."
        
        # Send success notification (if Slack webhook configured)
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "🚀 Clyvanta deployed successfully to Oracle Cloud!",
              "attachments": [{
                "color": "good",
                "fields": [
                  {"title": "Environment", "value": "${{ needs.setup.outputs.environment }}", "short": true},
                  {"title": "URL", "value": "${{ needs.setup.outputs.deploy_url }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Branch", "value": "${{ github.ref_name }}", "short": true}
                ]
              }]
            }' || echo "Slack notification failed (optional)"
        fi
        
        # Update uptime monitoring (if configured)
        if [ -n "${{ secrets.UPTIME_ROBOT_API_KEY }}" ]; then
          echo "📊 Updating uptime monitoring..."
          # Add uptime robot API call here
        fi
        
        echo "✅ Post-deployment tasks completed"

  # 🚨 Failure Notification
  notify_failure:
    name: 🚨 Notify Deployment Failure
    runs-on: ubuntu-latest
    needs: [setup, test, security, deploy]
    if: failure() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    
    steps:
    - name: 🚨 Send Failure Notification
      run: |
        echo "🚨 Deployment failed!"
        
        if [ -n "${{ secrets.SLACK_WEBHOOK_URL }}" ]; then
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{
              "text": "🚨 Clyvanta deployment FAILED!",
              "attachments": [{
                "color": "danger",
                "fields": [
                  {"title": "Environment", "value": "${{ needs.setup.outputs.environment }}", "short": true},
                  {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
                  {"title": "Commit", "value": "${{ github.sha }}", "short": true},
                  {"title": "Workflow", "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}", "short": false}
                ]
              }]
            }'
        fi