name: 🚀 Optimized Safe CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

jobs:
  # Stage 1: Code Quality & Security
  quality-checks:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript type checking
        run: npm run check-types

      - name: ESLint code quality
        run: npm run lint

      - name: Security audit
        run: npm audit --audit-level moderate

      - name: Production build test
        run: npm run build

  # Stage 2: Automated Testing with Local Docker Build
  automated-testing:
    name: 🧪 Automated Testing with Local Build
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application for testing
        run: |
          # Use docker compose to build and test locally
          docker compose up -d --build
          sleep 30
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8080

      - name: Run mobile responsiveness tests
        run: npx playwright test tests/mobile-responsiveness.spec.ts
        env:
          CI: true

      - name: Run functional tests
        run: npx playwright test tests/functional.spec.ts
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload screenshots on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-screenshots
          path: test-results/
          retention-days: 7

      - name: Cleanup test environment
        if: always()
        run: docker compose down

  # Stage 3: Staging Deployment (Automatic)
  deploy-staging:
    name: 🚧 Deploy to Staging
    runs-on: ubuntu-latest
    needs: automated-testing
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Commit: ${{ github.sha }}"
          echo "✅ Staging deployment complete"

  # Stage 4: Production Deployment (Manual Approval Required)
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [automated-testing, deploy-staging]
    if: github.event.inputs.environment == 'production' || (github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch')
    environment: 
      name: production
      url: https://clyvanta.com
    steps:
      - name: Pre-deployment health check
        run: |
          echo "🔍 Running pre-deployment health checks..."
          curl -f https://clyvanta.com || exit 1
          echo "✅ Current production is healthy"

      - name: Deploy to production with rollback capability
        run: |
          echo "🚀 Starting production deployment..."
          echo "Commit: ${{ github.sha }}"
          
          # SSH into production server
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ubuntu@${{ secrets.DROPLET_IP }} << 'EOF'
            set -e
            cd clyvanta-new
            
            # Backup current deployment
            echo "📦 Creating deployment backup..."
            docker tag clyvanta-nginx:latest clyvanta-nginx:backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
            docker tag clyvanta-website:latest clyvanta-website:backup-$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
            
            # Pull latest code
            echo "⬇️ Pulling latest code..."
            git fetch origin
            git reset --hard origin/main
            
            # Build and deploy with health checks
            echo "🔄 Building and deploying new version..."
            docker compose down
            docker compose up -d --build
            
            # Wait for containers to start
            sleep 30
            
            # Health check
            echo "🏥 Running health checks..."
            for i in {1..10}; do
              if curl -f http://localhost:8080 > /dev/null 2>&1; then
                echo "✅ Health check passed"
                break
              fi
              echo "⏳ Waiting for application to start (attempt $i/10)..."
              sleep 10
            done
            
            # Verify external access
            if ! curl -f http://localhost:8080 > /dev/null 2>&1; then
              echo "❌ Health check failed - rolling back"
              docker compose down
              git reset --hard HEAD~1
              docker compose up -d --build
              exit 1
            fi
            
            echo "🎉 Production deployment successful!"
          EOF

      - name: Post-deployment verification
        run: |
          echo "🔍 Running post-deployment verification..."
          sleep 15
          
          # Test main site
          curl -f https://clyvanta.com || exit 1
          
          # Test mobile responsiveness (basic check)
          curl -f -H "User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)" https://clyvanta.com || exit 1
          
          echo "✅ Post-deployment verification passed"

      - name: Cleanup SSH key
        if: always()
        run: rm -f /tmp/ssh_key

      - name: Notify deployment success
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "🔗 Site: https://clyvanta.com"
          echo "📊 Commit: ${{ github.sha }}"
          echo "👤 Deployed by: ${{ github.actor }}"